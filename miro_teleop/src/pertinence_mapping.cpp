/* Libraries */
#include "ros/ros.h"
#include "miro_teleop/PertinenceMapping.h"
#include <cstdio>
#include <cmath>

/* Constants */
#define HSIZE 240 // Horizontal map size (in cm)
#define VSIZE 240 // Vertical map size (in cm)
#define RES 24 // Grid resolution

/**
 * Pertinence Mapping Service function.
 * Maps all spatial relation landscapes into one matrix.
 *
 * With all the matrices generated by the Spatial Reasoner, this service
 * performs an element-wise mathematical operation to obtain a landscape
 * that is parameterized by the information given by the target pointed.
 * 
 * Then, a normalization is done to maintain the elements in the range [0,1].
 */
bool PertinenceMapper(miro_teleop::PertinenceMapping::Request  &req,
        			  miro_teleop::PertinenceMapping::Response &res)
{
	/* Input matrices to be processed (received from master) */
	std_msgs::Float64 M1[RES*RES], M2[RES*RES];

	/* Landscape matrix to be returned (mapped into an 1-D array) */
	std_msgs::Float64 MOut[RES*RES];

	ROS_INFO("Request received from central node");

	/* Obtain inputs from request and performs fuzzy and*/
	for(int i=0;i<RES*RES;i++)
	{
		M1[i].data = req.M1[i].data;
		M2[i].data = req.M2[i].data;
		MOut[i].data = fmin(M1[i].data, M2[i].data);
		res.MOut.push_back(MOut[i]);
	}

	ROS_INFO("Successfully mapped the pertinences");

  	return true;
}

/**
 * Pertinence Mapping Service Main function.
 * Initializes and advertises the service.
 */
int main(int argc, char **argv)
{
	ros::init(argc, argv, "pertinence_mapping_server");
	ros::NodeHandle n;
	ros::ServiceServer service =
		n.advertiseService("pertinence_mapper", PertinenceMapper);
	ROS_INFO("Pertinence Mapping service active");
	ros::spin();

	return 0;
}
